опросник:

1) Что такое  переопределение метода?

	Переопределение метода в Java - это механизм, который
	 подклассу предоставить свою собственную реализацию метода, который уже определен в его суперклассе.
	 При переопределении метода в подклассе используется тот же сигнатурный интерфейс (имя, возвращаемый тип и параметры),
	 что и в суперклассе, но предоставляется новая реализация для этого метода в контексте подкласса.

2) Какие бывают виды  классов?

Обычный класс: Содержит поля и методы, используется для создания объектов.
Абстрактный класс: Может содержать абстрактные методы, предоставляет базовую структуру для подклассов.
Интерфейс: Объявляет методы без их реализации, поддерживает множественное наследование методов.
Финальный класс: Не может быть наследован, используется для предотвращения изменений или расширения.
Внутренний класс: Определен внутри другого класса, включает статические, нестатические, локальные и анонимные классы.
Перечисление (Enum): Предназначено для определения конечного набора констант
3) Как и зачем можно использовать модификатор final?



Модификатор final в Java используется для предотвращения изменений:

Переменная: Значение не может быть изменено.
Метод: Нельзя переопределить в подклассах.
Класс: Нельзя наследовать.
Это обеспечивает предсказуемость, безопасность и поддерживает интеграцию кода.



4) Какие есть варианты использования ключевого слова try?

Ключевое слово try в Java используется для:

try-catch: Обработки исключений.
try-finally: Гарантированного выполнения кода, независимо от исключений.
try-catch-finally: Комбинированной обработки исключений и гарантированного выполнения кода.
try-with-resources: Управления автоматическим закрытием ресурсов после использования.
5) Какие есть стандартные реализации интерфейса List и в каких ситуациях их нужно использовать?



В Java существует несколько стандартных реализаций интерфейса List, включая:

ArrayList: Реализация, основанная на массиве. Используется, когда требуется быстрый доступ к элементам по индексу.
LinkedList: Реализация, основанная на связанных списках. Используется, когда требуется эффективная вставка и удаление элементов в середине списка.
Vector: Похож на ArrayList, но синхронизирован. Используется в многопоточных сценариях, но часто не рекомендуется из-за синхронизации.
Выбор между ними зависит от требований конкретной задачи:

ArrayList: Хорош для случаев, когда часто происходит доступ по индексу, но вставка и удаление элементов редки.
LinkedList: Эффективен при частых вставках и удалениях, особенно в середине списка, но менее эффективен для доступа по индексу.
Vector: Редко используется из-за синхронизации. Вместо этого, обычно предпочтительнее использовать ArrayList в немногопоточных сценариях или
 использовать другие механизмы синхронизации в более сложных случаях.
Выбор зависит от конкретных требований производительности и использования операций с List в вашем коде.

6) В чём основная идея стримов из пакета java.util.stream?

Основная идея стримов из пакета java.util.stream в Java заключается в предоставлении декларативных и
удобных для использования операций для обработки и трансформации данных.
 Стримы предоставляют функциональный стиль программирования, позволяя выполнять операции над элементами коллекций (и не только) с минимумом усилий и синтаксического сахара.
 Стримы обеспечивают удобный и эффективный способ выполнения операций, таких как фильтрация, отображение, сортировка и агрегация данных. Они также способствуют параллельной обработке данных,
 что улучшает производительность в многопроцессорных системах.

7) Каким критериям должна удовлетворять «хорошая» хэш-функция?



Хорошая хэш-функция должна удовлетворять следующим критериям:

Равномерное распределение: Хэш-значения должны быть равномерно распределены по всему диапазону возможных значений, чтобы избежать коллизий.
Эффективность вычислений: Хэш-функция должна вычисляться быстро, чтобы обеспечить эффективную работу структур данных, использующих хэширование.
Минимизация коллизий: Хэш-функция должна стремиться к минимизации коллизий (ситуаций, когда различные входные данные дают одно и то же хэш-значение).
Стойкость к атакам: Хэш-функция должна быть стойкой к различным видам атак, таким как коллизионные атаки, чтобы обеспечивать безопасность при использовании в криптографических задачах.
Детерминированность: Она должна быть детерминированной, т.е., для одинаковых входных данных всегда генерировать одно и то же хэш-значение.
Удовлетворение этим критериям обеспечивает эффективное и надежное использование хэш-функций в различных приложениях, от обеспечения эффективности в хэш-таблицах до обеспечения безопасности в криптографических сценариях.

8)В чём причина популярности и широкого распространения кодировки UTF-8?

Популярность и широкое распространение кодировки UTF-8 обусловлены несколькими факторами:

Универсальность: UTF-8 поддерживает практически все символы из всех письменных языков мира, включая символы различных алфавитов, математические символы, знаки препинания и даже эмодзи.
Обратная совместимость: UTF-8 совместима с кодировкой ASCII, что делает ее удобной для миграции и обеспечивает обратную совместимость с существующими системами, использующими ASCII.
Экономия места: UTF-8 представляет многие символы одним байтом, что экономит место для текстовой информации, особенно в англоязычных текстах.
Широкая поддержка: UTF-8 широко поддерживается в различных языках программирования, браузерах, операционных системах и других приложениях, что обеспечивает совместимость и переносимость.
Многоязычная поддержка: UTF-8 идеально подходит для работы с текстом на нескольких языках, что делает ее предпочтительной для глобальных веб-приложений и многоязычных систем.
Из-за этих преимуществ UTF-8 стала доминирующей кодировкой для текстовых данных в современном программировании и обмене информацией в интернете.

9) Сравните форматы XML и JSON. Когда какой  использовать?

XML (eXtensible Markup Language) и JSON (JavaScript Object Notation) - это оба формата представления данных, но существуют некоторые различия между ними:

XML:
Синтаксис: Основан на разметке с использованием тегов, например <tag>data</tag>.
Читаемость: Более читаемый для человека, так как использует теги и атрибуты.
Пространства имен: Поддерживает пространства имен, что полезно для разделения контекста элементов.
JSON:

Синтаксис: Основан на парах "ключ-значение", например "key": "value".
Читаемость: Более компактный и легкий для чтения компьютером, но менее удобен для человека.
Пространства имен: Не поддерживает пространства имен, что делает его более простым для обработки данных.
Когда использовать каждый:

XML: Используется, когда важна читаемость человеком и необходима поддержка сложных структур данных (например, документов с разметкой).
JSON: Чаще используется в веб-разработке, когда важна компактность данных и их обработка в JavaScript, также распространен в API, когда данные представлены в виде объектов.
В целом, выбор между XML и JSON зависит от конкретных требований вашего приложения и предпочтений разработчиков, но JSON часто предпочтителен для передачи данных в сети и обработки в веб-приложениях.

10)Опишите что будет происходить «под капотом» после ввода адреса сайта в браузере и нажатия Enter?

DNS-запрос: Браузер отправляет запрос на DNS-сервер для получения IP-адреса, соответствующего введенному доменному имени.
TCP-соединение: После получения IP-адреса, браузер устанавливает TCP-соединение с веб-сервером по этому адресу, используя протокол HTTP или HTTPS.
Отправка HTTP-запроса: Браузер отправляет HTTP-запрос, который содержит запрошенный URL и другую информацию, на веб-сервер.
Обработка запроса на сервере: Веб-сервер обрабатывает запрос, выполняет необходимые действия (например, обращается к базе данных) и генерирует HTTP-ответ.
Получение и обработка ответа: Браузер получает HTTP-ответ, который включает в себя HTML-код, стили, изображения и другие ресурсы.
Отображение страницы: Браузер рендерит полученный HTML-код, выполняет его и отображает веб-страницу.
Эти шаги представляют основные этапы процесса загрузки веб-страницы после ввода адреса сайта в браузер и нажатия Enter.

